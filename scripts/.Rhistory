library(readxl)
data <- read_xlsx(DATA.xlsx)
data <- read_xlsx("C:\Users\dasan\Downloads\DATA.xlsx")
data <- read_xlsx("C:/Users/dasan/Downloads/DATA.xlsx")
# Assuming 'df' is your data frame with columns 'BMI' and 'Age'
# Calculate mean BMI for each age range
library(dplyr)
# Define age ranges (adjust ranges according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Group data by age ranges and calculate mean BMI
mean_bmi_by_age <- df %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Assuming you've read the data from an Excel file using readxl package
library(readxl)
# Replace "file_path.xlsx" with your file path and adjust sheet name if needed
df <- read_excel("file_path.xlsx", sheet = "Sheet1")
# Load necessary libraries
library(readxl)
library(dplyr)
# Define the file path to your Excel file
file_path <- "C:/Users/dasan/Downloads/DATA.xlsx"
# Read the Excel file into a data frame
data <- read_excel(file_path)
# Define age ranges (adjust according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Calculate mean BMI for each age range
mean_bmi_by_age <- data %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Plotting the histogram
barplot(height = mean_bmi_by_age$mean_BMI, names.arg = mean_bmi_by_age$Age_Range,
main = "Mean BMI by Age Range", xlab = "Age Range", ylab = "Mean BMI",
col = "skyblue", ylim = c(0, max(mean_bmi_by_age$mean_BMI) * 1.1))
plot(cars)
clear()
clear()
library(ggplot2)
getwd()
getwd()
rm(list = ls())
setwd("C:/Users/dasan/Downloads/Bioinformatics_Project/Single_Cell_Analysis/scripts")
# load libraries
library(Seurat)
library(tidyverse)
library(hdf5r)
# Load the NSCLC dataset
nsclc.sparse.m <- Read10X_h5(
filename = "C:/Users/dasan/Downloads/Bioinformatics_Project/Single_Cell_Analysis/Data/20k_NSCLC_DTC_3p_nextgem_donor_1_count_sample_feature_bc_matrix.h5")
str(nsclc.sparse.m)
cts <-  nsclc.sparse.m$`Gene Expression`
# Initialize the Seurat object with the raw (non-normalized data).
nsclc.seurat.obj <- CreateSeuratObject(counts = cts, project = "NSCLC", min.cells = 3, min.features = 200)
str(nsclc.seurat.obj)
nsclc.seurat.obj
# 1. QC -------
View(nsclc.seurat.obj@meta.data)
FeatureScatter(nsclc.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
geom_smooth(method = 'lm')
library(ggplot2)
VlnPlot(nsclc.seurat.obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
FeatureScatter(nsclc.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
geom_smooth(method = 'lm')
#Output folder for plots
out_dir <- "C:/Users/dasan/Downloads/Bioinformatics_Project/Single_Cell_Analysis/Seurat_Plots"
dir.create(out_dir, showWarnings = FALSE)  # create folder if not exists
ggsave(filename = paste0(out_dir, "Violin_Plot.png"), plot = p1, width = 6, height = 5, dpi = 300)
p1 <- VlnPlot(nsclc.seurat.obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
ggsave(filename = paste0(out_dir, "Violin_Plot.png"), plot = p1, width = 6, height = 5, dpi = 300)
p2 <- FeatureScatter(nsclc.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
geom_smooth(method = 'lm')
ggsave(filename = paste0(out_dir, "Scatter_Plot.png"), plot = p2, width = 6, height = 5, dpi = 300)
ggsave(filename = "Violin_Plot.png", plot = p1, path = out_dir, width = 6, height = 5, dpi = 300)
ggsave(filename = "Scatter_Plot.png", plot = p2, path = out_dir, width = 6, height = 5, dpi = 300)
ggsave(filename = "Scatter_Plot.png", plot = p2, path = out_dir, width = 6, height = 5, dpi = 300)
p2 <- FeatureScatter(nsclc.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") + geom_smooth(method = 'lm')
ggsave(filename = "Scatter_Plot.png", plot = p2, path = out_dir, width = 6, height = 5, dpi = 300)
# 2. Filtering -----------------
nsclc.seurat.obj <- subset(nsclc.seurat.obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 &
percent.mt < 5)
# % MT reads
nsclc.seurat.obj[["percent.mt"]] <- PercentageFeatureSet(nsclc.seurat.obj, pattern = "^MT-")
View(nsclc.seurat.obj@meta.data)
# 2. Filtering -----------------
nsclc.seurat.obj <- subset(nsclc.seurat.obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 &
percent.mt < 5)
# 3. Normalize data ----------
#nsclc.seurat.obj <- NormalizeData(nsclc.seurat.obj, normalization.method = "LogNormalize", scale.factor = 10000)
# OR
nsclc.seurat.obj <- NormalizeData(nsclc.seurat.obj)
str(nsclc.seurat.obj)
# 4. Identify highly variable features --------------
nsclc.seurat.obj <- FindVariableFeatures(nsclc.seurat.obj, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(nsclc.seurat.obj), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(nsclc.seurat.obj)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
# plot variable features with and without labels
p3 <- VariableFeaturePlot(nsclc.seurat.obj)
p4 <- LabelPoints(plot = p3, points = top10, repel = TRUE)
# plot variable features with and without labels
p3 <- VariableFeaturePlot(nsclc.seurat.obj)
p4 <- LabelPoints(plot = p3, points = top10, repel = TRUE)
combined_plot <- p3 + p4
ggsave(filename = "Variable_features_with_&_without_labels.png", plot = combined_plot, path = out_dir, width = 10, height = 6, dpi = 300)
ggsave(filename = "Variable_features_with_&_without_labels.png", plot = combined_plot, path = out_dir, width = 12, height = 6, dpi = 300)
# 5. Scaling -------------
all.genes <- rownames(nsclc.seurat.obj)
nsclc.seurat.obj <- ScaleData(nsclc.seurat.obj, features = all.genes)
str(nsclc.seurat.obj)
# 6. Perform Linear dimensionality reduction --------------
nsclc.seurat.obj <- RunPCA(nsclc.seurat.obj, features = VariableFeatures(object = nsclc.seurat.obj))
# visualize PCA results
print(nsclc.seurat.obj[["pca"]], dims = 1:5, nfeatures = 5)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
p5 <- DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
ggsave(filename = "Dimentional_Heatmap.png", plot = p5, path = out_dir, width = 6, height = 5, dpi = 300)
# determine dimensionality of the data
p6 <- ElbowPlot(nsclc.seurat.obj)
ggsave(filename = "Elbow_Plot.png", plot = p6, path = out_dir, width = 6, height = 5, dpi = 300)
# 7. Clustering ------------
nsclc.seurat.obj <- FindNeighbors(nsclc.seurat.obj, dims = 1:15)
# understanding resolution
nsclc.seurat.obj <- FindClusters(nsclc.seurat.obj, resolution = c(0.1,0.3, 0.5, 0.7, 1))
View(nsclc.seurat.obj@meta.data)
p7 <- DimPlot(nsclc.seurat.obj, group.by = "RNA_snn_res.0.5", label = TRUE)
ggsave(filename = "RNA_snn_res_0.5.png", plot = p7, path = out_dir, width = 6, height = 5, dpi = 300)
# setting identity of clusters
Idents(nsclc.seurat.obj)
Idents(nsclc.seurat.obj) <- "RNA_snn_res.0.1"
Idents(nsclc.seurat.obj)
# non-linear dimensionality reduction --------------
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
nsclc.seurat.obj <- RunUMAP(nsclc.seurat.obj, dims = 1:15)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
p8 <- DimPlot(nsclc.seurat.obj, reduction = "umap")
ggsave(filename = "UMAP_clustering.png", plot = p8, path = out_dir, width = 6, height = 5, dpi = 300)
# 7. Clustering ------------
nsclc.seurat.obj <- FindNeighbors(nsclc.seurat.obj, dims = 1:15)
# understanding resolution
nsclc.seurat.obj <- FindClusters(nsclc.seurat.obj, resolution = c(0.1,0.3, 0.5, 0.7, 1))
View(nsclc.seurat.obj@meta.data)
p7 <- DimPlot(nsclc.seurat.obj, group.by = "RNA_snn_res.0.5", label = TRUE)
ggsave(filename = "RNA_snn_res_0.5.png", plot = p7, path = out_dir, width = 6, height = 5, dpi = 300)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
# visualize PCA results
print(nsclc.seurat.obj[["pca"]], dims = 1:5, nfeatures = 5)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
ggsave(filename = "Dimentional_Heatmap.png", plot = p5, path = out_dir, width = 6, height = 5, dpi = 300)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
# determine dimensionality of the dat
ElbowPlot(nsclc.seurat.obj)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
p5 <- DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
ggsave(filename = "Dimentional_Heatmap.png", plot = p5, path = out_dir, width = 6, height = 5, dpi = 300)
?png()
png("out_dir/Dimentional_Heatmap.png", width = 6, height = 5, res = 300 )
png("out_dir/Dimentional_Heatmap.png", width = 2000, height = 1600, res = 300 )
#Output folder for plots
out_dir <- "C:/Users/dasan/Downloads/Bioinformatics_Project/Single_Cell_Analysis/Seurat_Plots/"
dir.create(out_dir, showWarnings = FALSE)  # create folder if not exists
png(filename = paste0(out_dir, "Dimentional_Heatmap.png"), width = 2000, height = 1600, res = 300)
DimHeatmap(nsclc.seurat.obj, dims = 1, cells = 500, balanced = TRUE)
dev.off()
# determine dimensionality of the dat
p6 <- ElbowPlot(nsclc.seurat.obj)
ggsave(filename = "Elbow_Plot.png", plot = p6, path = out_dir, width = 6, height = 5, dpi = 300)
